# Reference: https://tjaddison.com/blog/2018/06/adding-pester-tests-to-a-powershell-module-and-scheduling-ci-with-appveyor/

# Skip commits that only involve readme.md file changes. 
skip_commits:
  files:
    - "**/*.md"

# Install Pester using Chocolatey 
install:
  - cinst pester

# Dont run any build step (since we have nothing to bulid except running our powershell scripts)
build: off

# Run Invoke-Pester on the folder containing our tests

# This will run tests but not fail the build if tests fail (thus commented). You can use this code when (for some reasons), you want to say merge a code, even when with failing tests.
# test_script:
#   - ps: Invoke-Pester -Path .\PSScripts

# This will run tests and also fail the build if tests fail. 
# Also added the switch to give code coverage on all files/modules in the directory PSScripts: .\PSScripts\*.ps1, .\PSScripts\*.psm1
test_script:
  - ps: |
      $testResultsFile = ".\TestsResults.xml"
      $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru -CodeCoverage .\PSScripts\*.ps1, .\PSScripts\*.psm1
      (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
      if ($res.FailedCount -gt 0) { 
          throw "$($res.FailedCount) tests failed."
      }

# If you want to test only a particular function, use the switches as given here (for function names and start-end lines):
# https://pester.dev/docs/usage/code-coverage 